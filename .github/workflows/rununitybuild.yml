name: Run Single-Version Unity Build

on:
  workflow_call:
    inputs:
      runs-on:
        description: "Runner labels to determine the action runner to use."
        required: true
        type: string
      targetPlatform:
        description: "Sets the build target platform the Unity build is being made for"
        required: true
        type: string    
      projectPath:
        description: "Enter the directory path to the Unity project. If no value is entered, the project is assumed to be in the repository root."
        required: false
        type: string
      unityHubPath:
        description: "Enter the directory path where the Unity Hub is installed (without the version), e.g. 'C:/Program Files/Unity Hub'. If no value is entered, the Unity default install path is used."
        required: false
        type: string
      buildOnTestFail:
        description: "Should the build continue if the automated tests fail?"
        required: false
        type: boolean

jobs:
  run_build:
    name: Run Unity Build process
    runs-on: ["${{ inputs.runs-on }}"]
    steps:
      - name: Script Version
        run: |
          echo "::group::Script Versioning"
          $scriptVersion = "1.0.1"
          echo "Build Script Version: $scriptVersion"
          echo "::endgroup::"
        shell: pwsh     
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          clean: true
      - id: build
        name: 'Run Unity Builds'
        run: |
          echo "::group::Validating input"

          $versionFile = "${{ inputs.projectPath }}"
          if([string]::IsNullOrEmpty($versionFile))
          {
            echo 'version input was empty, using default'
            $versionFile = "ProjectSettings/ProjectVersion.txt"
          }else {
            $versionFile = "$versionFile/ProjectSettings/ProjectVersion.txt"
          }

          if ( -not (Test-Path -Path $versionFile) ) {
            Write-Error "Failed to find a valid ProjectVersion.txt file, have you set the unityProjectPath correctly?"
            exit 1
          }

          echo "::endgroup::"

          echo "::group::Unity Version Project check"

          $unityVersion = Get-Content $versionFile
          $pattern = '(?<version>(?:(?<major>\d+)\.)?(?:(?<minor>\d+)\.)?(?:(?<patch>\d+[fab]\d+)\b))|((?:\((?<revision>\w+))\))'
          $matches = $matches = [regex]::Matches($unityVersion, $pattern)
          $unityVersion = $matches[1].Groups['version'].Value.Trim()
        
          echo "Detected version is $unityVersion"
          echo "::endgroup::"

          echo "::group::Set Hub and editor locations"

          ## Set Hub and editor locations
          if ( (-not $global:PSVersionTable.Platform) -or ($global:PSVersionTable.Platform -eq "Win32NT") )
          {
            $hubPath = "${{ inputs.unityHubPath }}"
            if([string]::IsNullOrEmpty($hubPath))
            {
              $hubPath = "C:\Program Files\Unity Hub\Unity Hub.exe"
            }else {
              $hubPath = "$hubPath\Unity Hub.exe"
            }

            #"Unity Hub.exe" -- --headless help
            #. 'C:\Program Files\Unity Hub\Unity Hub.exe' -- --headless help
            function unity-hub 
            {
              & $hubPath -- --headless $args.Split(" ") | Out-String -NoNewline
            }            
          }elseif ( $global:PSVersionTable.OS.Contains("Darwin") ) {
            $hubPath = "${{ inputs.unityHubPath }}"
            if([string]::IsNullOrEmpty($hubPath))
            {
              $hubPath = "/Applications/Unity Hub.app/Contents/MacOS/Unity Hub"
            }else {
              $hubPath = "$hubPath/Unity Hub"
            }

            # /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless help
            function unity-hub 
            {
              & $hubPath -- --headless $args.Split(" ") | Out-String -NoNewline
            }            
          }elseif ( $global:PSVersionTable.OS.Contains("Linux") ) {
            $hubPath = "${{ inputs.unityHubPath }}"
            if([string]::IsNullOrEmpty($hubPath))
            {
              $hubPath = "$HOME/Unity Hub/UnityHub.AppImage"
            }else {
              $hubPath = "$hubPath/UnityHub.AppImage"
            }

            # /UnityHub.AppImage --headless help
            # xvfb-run --auto-servernum "$HOME/Unity Hub/UnityHub.AppImage" --headless help
            function unity-hub 
            {
              xvfb-run --auto-servernum "$hubPath" --headless $args.Split(" ")
            }            
          }

          echo "::endgroup::"

          echo "::group::Get String function to query a string for a value"

          function GetString($InputString, $InputPattern, $MatchIndex) 
          {
            $regExResult = $InputString | Select-String -Pattern $InputPattern
            if($regExResult.Length -gt 0)
            {
              return $regExResult.Matches[$MatchIndex].Value
            }else {
              return 0
            }
          }

          function Get-LetterCount
          {
            Param ([string]$string)
            return $string.Length
          }
          echo "::endgroup::"

          echo "::group::Find Installed Unity version based on input"
          echo "Unity hub path is {$hubPath}"
          echo "Requested unity version is {$unityVersion}"
          
          $InstalledUnityVersions = unity-hub editors
          $editorRootPath = unity-hub ip -g
          echo "Installed unity versions are {$InstalledUnityVersions}"
          echo "Unity install path is {$editorRootPath}"

          $versionLength = Get-LetterCount $unityVersion
          if ($versionLength -eq 4) {
            $queryUnityVersion = GetString $InstalledUnityVersions "$unityVersion.{4,7}" -MatchIndex 0
          }elseif ($versionLength -eq 6) {
            $queryUnityVersion = GetString $InstalledUnityVersions "$unityVersion.{4,5}" -MatchIndex 0
          }else {
            $queryUnityVersion = GetString $InstalledUnityVersions "$unityVersion" -MatchIndex 0
          }

          echo "Found unity version is {$queryUnityVersion} for input {$unityVersion}"

          if ($queryUnityVersion -ne 0) 
          {
            $unityVersion = $queryUnityVersion.Trim(","," ").Trim()
            echo "Long Unity version is $unityVersion"
          }else {
            echo "Unity $unityVersion not found on this machine, skipping"
            exit 0
          }

          echo "::endgroup::"

          echo "::group::Search for Editor if not found"
          
          $checkPath = Join-Path $editorRootPath $unityVersion
          echo "Testing for editor at $checkPath"
          while (-not (Test-Path "$checkPath")) {
              $source = $unityVersion.Replace("f1","")
              $newversion = $source.Split(".")
              $newversion[2] = [int]$newversion[2] - 1
              if ([int]$newversion[2] -lt 1) {
                echo "Unity $unityVersion not found on this machine, skipping"
                exit 0
              }
              $newunityVersion = "{0}.{1}.{2}f1" -f $newversion[0],$newversion[1],$newversion[2]
              echo "Unity $unityVersion not found on this machine, trying $newunityVersion"
              $unityVersion = $newunityVersion
              $checkPath = Join-Path $editorRootPath $unityVersion
          }
          echo "::endgroup::"

          echo "::group::Set editor locations"

          if ( (-not $global:PSVersionTable.Platform) -or ($global:PSVersionTable.Platform -eq "Win32NT") ) {
            echo 'Building using Windows'
            $editorFileEx = "/Editor/Unity.exe"
            $editorrunpath = Join-Path $editorRootPath $unityVersion $editorFileEx

            function unity-editor {
              #$p = Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$editorrunpath" -ArgumentList (@(' -batchmode') + $args.Split(" "))
              & $editorrunpath -batchmode $args.Split(" ") | Out-String
            }
          }elseif ( $global:PSVersionTable.OS.Contains("Darwin") ) {
            echo 'Building using Mac'
            $editorFileEx = "/Unity.app/Contents/MacOS/Unity"
            $editorrunpath = Join-Path $editorRootPath $unityVersion $editorFileEx

            function unity-editor {
              #$p = Start-Process -Verbose -NoNewWindow -PassThru -Wait -FilePath "$editorrunpath" -ArgumentList (@(' -batchmode') + $args.Split(" "))
              & $editorrunpath -batchmode $args.Split(" ") | Out-String
            }
          }elseif ( $global:PSVersionTable.OS.Contains("Linux") ) {
            echo 'Building using Linux'
            $editorFileEx = "/Editor/Unity"
            $editorrunpath = Join-Path $editorRootPath $unityVersion $editorFileEx

            function unity-editor {
              xvfb-run --auto-servernum "$editorrunpath" -batchmode $args.Split(" ")
            }
          }else {
            echo 'Unknown build platform'
          }

          echo "::endgroup::"

          echo "::group::Test Unity version is installed"

          if ( -not (Test-Path "$editorrunpath") ) 
          {
            Write-Error "Editor not Found for $unityVersion"
            exit 1
          }else {
              echo "Editor Path is {$editorrunpath}"
          }

          echo "::endgroup::"

          echo "::group::Setup logging and run Unit tests"          

          # Log detail
          $logDirectory = "Logs"          
          if (Test-Path -Path $logDirectory) {
              echo "Clearing logs from a previous run"
              Remove-item $logDirectory -recurse
            }

          $logDirectory = New-Item -ItemType Directory -Force -Path $logDirectory | Select-Object

          echo "Log Directory: $logDirectory"
          $date = Get-Date -Format "yyyyMMddTHHmmss"

          # If run manually, the Refname is actually blank, so just use date
          if([string]::IsNullOrEmpty(${GITHUB_REF_NAME})) {
            $logName = Join-Path $logDirectory $date
          }else {          
            $logName = Join-Path $logDirectory ${GITHUB_REF_NAME}-$date
          }

          $logPath = "$logName.log"
          $testsLogPath = "$logName-tests.xml"

          echo "Logpath [$logPath]"
          echo "TestsPath [$testsLogPath]"
          echo "::endgroup::"

          echo "::group::Run build"

          $unityProjectPath = "${{ inputs.projectPath }}"
          if([string]::IsNullOrEmpty($unityProjectPath))
          {
            $unityProjectPath = "."
          }

          echo "---------------------------------------------"
          echo "Start Testing"
          echo "Unity Command\n[unity-editor -projectPath $unityProjectPath -logfile $logPath -batchmode -nographics -quit -buildTarget ${{ inputs.targetPlatform }}]"

          unity-editor -projectPath $unityProjectPath -logfile $logPath -batchmode -nographics -quit -buildTarget ${{ inputs.targetPlatform }}

          echo "---------------------------------------------"
          echo "::group::Unity Unit tests Results"
          if (Test-Path $testsLogPath) {
            echo "Test Run results for ${GITHUB_REPOSITORY} Branch ${GITHUB_REF}"
            echo ""
            Select-Xml -Path $testsLogPath -XPath '/test-run/test-suite' | ForEach-Object { "Name: " +$_.Node.name, ", Result: " + $_.Node.result, ", Total Tests: " + $_.Node.total, ", Passed: " + $_.Node.passed, ", Failed: " + $_.Node.failed, ", Skipped: " + $_.Node.skipped }
          }else {
            echo "No test results found for ${GITHUB_REPOSITORY} Branch ${GITHUB_REF} at $testsLogPath"
            echo ""
          }
          echo "::endgroup::"

          if($LASTEXITCODE -ne '0'){
            echo "::group::Unity Unit tests errors"
              $exitCode = $testResult.ExitCode
              Get-Content $logPath
              echo "Build failed due to errors ($LASTEXITCODE), please check the log at $logPath"
            echo "::endgroup::"

            if(${{ inputs.buildOnTestFail }} -eq '0'){
              exit $LASTEXITCODE
            }
          }

          echo "::group::Create Unity Build execution script"

          $buildScript = 'using System; using System.Collections.Generic; using System.IO; using UnityEditor; using UnityEditor.Build.Reporting; using UnityEngine;

          public static class Builder
          {
              public static void BuildProject()
              {
                  try
                  {
                      List<string> ActiveScenePaths = new();
                      foreach (EditorBuildSettingsScene scene in EditorBuildSettings.scenes)
                      {
                          if (scene.enabled)
                          {
                              ActiveScenePaths.Add(scene.path);
                          }
                      }
                      BuildReport buildReport = default;

                      var options = new BuildPlayerOptions
                      {
                          scenes = ActiveScenePaths.ToArray(),
                          target = EditorUserBuildSettings.activeBuildTarget,
                          locationPathName = Path.Combine($"build/{EditorUserBuildSettings.activeBuildTarget}", GetBuildTargetOutputFileNameAndExtension()),
                          targetGroup = EditorUserBuildSettings.selectedBuildTargetGroup
                      };

                      buildReport = BuildPipeline.BuildPlayer(options);

                      switch (buildReport.summary.result)
                      {
                          case BuildResult.Succeeded:
                              EditorApplication.Exit(0);
                              break;
                          case BuildResult.Unknown:
                          case BuildResult.Failed:
                          case BuildResult.Cancelled:
                          default:
                              EditorApplication.Exit(1);
                              break;
                      }
                  }
                  catch (Exception ex)
                  {
                      Debug.Log("BUILD FAILED: " + ex.Message);
                      EditorApplication.Exit(1);
                  }
              }
              private static string GetBuildTargetOutputFileNameAndExtension()
              {
                  switch (EditorUserBuildSettings.activeBuildTarget)
                  {
                      case BuildTarget.Android:
                          return string.Format("{0}.apk", Application.productName);
                      case BuildTarget.StandaloneWindows64:
                      case BuildTarget.StandaloneWindows:
                          return string.Format("{0}.exe", Application.productName);
          #if UNITY_2018_1_OR_NEWER
                      case BuildTarget.StandaloneOSX:
          #endif
          #if !UNITY_2017_3_OR_NEWER
                              case BuildTarget.StandaloneOSXIntel:
                              case BuildTarget.StandaloneOSXIntel64:
          #endif
                          return string.Format("{0}.app", Application.productName);
                      case BuildTarget.iOS:
                      case BuildTarget.tvOS:
                      case BuildTarget.WebGL:
                      case BuildTarget.WSAPlayer:
                      case BuildTarget.StandaloneLinux64:
          #if !UNITY_2018_3_OR_NEWER
                              case BuildTarget.PSP2:    
          #endif
                      case BuildTarget.PS4:
                      case BuildTarget.XboxOne:
          #if !UNITY_2017_3_OR_NEWER
                              case BuildTarget.SamsungTV:
          #endif
          #if !UNITY_2018_1_OR_NEWER
                              case BuildTarget.N3DS:
                              case BuildTarget.WiiU:
          #endif
                      case BuildTarget.Switch:
                      case BuildTarget.NoTarget:
                      default:
                          return Application.productName;
                  }
              }
          }'

          $editorDirectory = "Editor"          
          $projectEditorsFolderPath = Join-Path $unityProjectPath "Assets" $editorDirectory
          echo "Assets folder located at [$projectEditorsFolderPath]"
          if (-not (Test-Path -Path $projectEditorsFolderPath)) {
              echo "No Editor folder in project, creating"
              New-Item -ItemType Directory -Force -Path $projectEditorsFolderPath
            }

          $buildScriptPath = Join-Path $projectEditorsFolderPath "Builder.cs"
          Set-Content -Path $buildScriptPath -Value $buildScript

          $buildOutputPath = Join-Path $unityProjectPath "build" ${{ inputs.targetPlatform }}

          echo "---------------------------------------------"
          echo "Start Building"
          echo "Unity Command\n[-projectPath $unityProjectPath -logfile $logPath -batchmode -nographics -quit -executeMethod Builder.BuildProject -outputPath $buildOutputPath -buildTarget ${{ inputs.targetPlatform }}]"

          unity-editor -projectPath $unityProjectPath -logfile $logPath -batchmode -nographics -quit -executeMethod Builder.BuildProject -outputPath $buildOutputPath -buildTarget ${{ inputs.targetPlatform }}

          echo "---------------------------------------------"
          echo "::endgroup::"
        shell: pwsh
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unity-build-log
          path: Logs/**